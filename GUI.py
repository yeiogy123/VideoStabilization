# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
import os
import numpy as np
import cv2
import time
# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets, QtMultimedia, QtMultimediaWidgets
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene, QMessageBox
class CustomGraphicsView(QtWidgets.QGraphicsView):
    pointClicked = QtCore.pyqtSignal(QtCore.QPointF)

    def __init__(self, parent=None):
        super(CustomGraphicsView, self).__init__(parent)
        self.setScene(QtWidgets.QGraphicsScene(self))
        self.setRenderHint(QtGui.QPainter.Antialiasing)
        self.image_item = None
        self.points = []  # 用來記錄點的位置

    def mousePressEvent(self, event):
        if self.image_item:
            scene_pos = self.mapToScene(event.pos())
            self.pointClicked.emit(scene_pos)
        super(CustomGraphicsView, self).mousePressEvent(event)

    def addPoint(self, point):
        self.points.append(point)
        print(self.points)
        ellipse = QtWidgets.QGraphicsEllipseItem(point.x() - 5, point.y() - 5, 10, 10)
        ellipse.setBrush(QtGui.QBrush(QtCore.Qt.red))
        self.scene().addItem(ellipse)

    def clearPoints(self):
        self.points.clear()
        for item in self.scene().items():
            if isinstance(item, QtWidgets.QGraphicsEllipseItem):
                self.scene().removeItem(item)

    def redrawPoints(self):
        for point in self.points:
            ellipse = QtWidgets.QGraphicsEllipseItem(point.x() - 5, point.y() - 5, 10, 10)
            ellipse.setBrush(QtGui.QBrush(QtCore.Qt.red))
            self.scene().addItem(ellipse)
class UiStabilization(object):
    def setupUi(self, Stabilization):
        Stabilization.setObjectName("Stabilization")
        Stabilization.resize(1500, 1080)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        Stabilization.setFont(font)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(Stabilization)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 1911, 1071))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")

        self.TotalVLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.TotalVLayout.setContentsMargins(0, 0, 0, 0)
        self.TotalVLayout.setObjectName("TotalVLayout")
        self.TotalHLayout = QtWidgets.QHBoxLayout()
        self.TotalHLayout.setObjectName("TotalHLayout")

        self.FunctionAndVideoTab = QtWidgets.QTabWidget(self.verticalLayoutWidget_2)
        self.FunctionAndVideoTab.setObjectName("FunctionAndVideoTab")
        self.FunctionTab = QtWidgets.QWidget()
        self.FunctionTab.setObjectName("FunctionTab")
        self.FunctionGroupBox = QtWidgets.QGroupBox(self.FunctionTab)
        self.FunctionGroupBox.setGeometry(QtCore.QRect(950, 10, 521, 481))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FunctionGroupBox.sizePolicy().hasHeightForWidth())
        self.FunctionGroupBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.FunctionGroupBox.setFont(font)
        self.FunctionGroupBox.setObjectName("FunctionGroupBox")

        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.FunctionGroupBox)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(10, 30, 501, 441))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")

        self.FunctionGroupVLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.FunctionGroupVLayout.setContentsMargins(0, 0, 0, 0)
        self.FunctionGroupVLayout.setObjectName("FunctionGroupVLayout")
        self.FunctionGroupH1Layout = QtWidgets.QHBoxLayout()
        self.FunctionGroupH1Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupH1Layout.setObjectName("FunctionGroupH1Layout")

        self.LoadVideo = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.LoadVideo.setFont(font)
        self.LoadVideo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LoadVideo.setAutoRepeat(False)
        self.LoadVideo.setAutoExclusive(False)
        self.LoadVideo.setAutoRepeatInterval(95)
        self.LoadVideo.setDefault(True)
        self.LoadVideo.setObjectName("LoadVideo")
        self.FunctionGroupH1Layout.addWidget(self.LoadVideo)

        self.VideoName = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.VideoName.setFont(font)
        self.VideoName.setAlignment(QtCore.Qt.AlignCenter)
        self.VideoName.setObjectName("VideoName")

        self.FunctionGroupH1Layout.addWidget(self.VideoName)

        self.FunctionGroupVLayout.addLayout(self.FunctionGroupH1Layout)

        self.FunctionGroupH2Layout = QtWidgets.QHBoxLayout()
        self.FunctionGroupH2Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupH2Layout.setObjectName("FunctionGroupH2Layout")

        self.OriginalFrameProgressBar = QtWidgets.QSlider(self.verticalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.OriginalFrameProgressBar.sizePolicy().hasHeightForWidth())
        self.OriginalFrameProgressBar.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(36)
        self.OriginalFrameProgressBar.setFont(font)
        self.OriginalFrameProgressBar.setOrientation(QtCore.Qt.Horizontal)
        self.OriginalFrameProgressBar.setObjectName("OriginalFrameProgressBar")
        self.FunctionGroupH2Layout.addWidget(self.OriginalFrameProgressBar)

        self.OriginalFrameNumber = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.OriginalFrameNumber.setFont(font)
        self.OriginalFrameNumber.setAlignment(QtCore.Qt.AlignCenter)
        self.OriginalFrameNumber.setObjectName("OriginalFrameNumber")
        self.FunctionGroupH2Layout.addWidget(self.OriginalFrameNumber)

        self.FunctionGroupVLayout.addLayout(self.FunctionGroupH2Layout)

        self.FunctionGroupH3Layout = QtWidgets.QHBoxLayout()
        self.FunctionGroupH3Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupH3Layout.setObjectName("FunctionGroupH3Layout")

        self.SelectPreviousFrame = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SelectPreviousFrame.sizePolicy().hasHeightForWidth())
        self.SelectPreviousFrame.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.SelectPreviousFrame.setFont(font)
        self.SelectPreviousFrame.setObjectName("SelectPreviousFrame")
        self.FunctionGroupH3Layout.addWidget(self.SelectPreviousFrame)

        self.FunctionGroupHpLayout = QtWidgets.QHBoxLayout()
        self.FunctionGroupHpLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupHpLayout.setObjectName("FunctionGroupHpLayout")
        self.WrappingButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.WrappingButton.setSizePolicy(sizePolicy)
        self.WrappingButton.setFont(font)
        self.WrappingButton.setObjectName("WrappingButton")
        self.FunctionGroupHpLayout.addWidget(self.WrappingButton)
        self.SmoothButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.SmoothButton.setSizePolicy(sizePolicy)
        self.SmoothButton.setFont(font)
        self.SmoothButton.setObjectName("SmoothButton")
        self.FunctionGroupHpLayout.addWidget(self.SmoothButton)
        self.FunctionGroupVLayout.addLayout(self.FunctionGroupHpLayout)

        self.SelectPreviousFrameNumber = QtWidgets.QSpinBox(self.verticalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SelectPreviousFrameNumber.sizePolicy().hasHeightForWidth())
        self.SelectPreviousFrameNumber.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.SelectPreviousFrameNumber.setFont(font)
        self.SelectPreviousFrameNumber.setAlignment(QtCore.Qt.AlignCenter)
        self.SelectPreviousFrameNumber.setObjectName("SelectPreviousFrameNumber")
        self.FunctionGroupH3Layout.addWidget(self.SelectPreviousFrameNumber)

        self.FunctionGroupVLayout.addLayout(self.FunctionGroupH3Layout)

        self.FunctionGroupH4Layout = QtWidgets.QHBoxLayout()
        self.FunctionGroupH4Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupH4Layout.setObjectName("FunctionGroupH4Layout")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.FunctionGroupH4Layout.addWidget(self.pushButton)

        self.ResetMarkerButton = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.ResetMarkerButton.setFont(font)
        self.ResetMarkerButton.setObjectName("ResetMarkerButton")
        self.FunctionGroupH4Layout.addWidget(self.ResetMarkerButton)
        self.FunctionGroupVLayout.addLayout(self.FunctionGroupH4Layout)

        self.FunctionGroupH5Layout = QtWidgets.QHBoxLayout()
        self.FunctionGroupH5Layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.FunctionGroupH5Layout.setObjectName("FunctionGroupH5Layout")

        self.Process = QtWidgets.QPushButton(self.verticalLayoutWidget_4)
        self.Process.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Process.sizePolicy().hasHeightForWidth())
        self.Process.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.Process.setFont(font)
        self.Process.setObjectName("Process")
        self.FunctionGroupH5Layout.addWidget(self.Process)

        self.StabilizationProgressBar = QtWidgets.QProgressBar(self.verticalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.StabilizationProgressBar.sizePolicy().hasHeightForWidth())
        self.StabilizationProgressBar.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.StabilizationProgressBar.setFont(font)
        self.StabilizationProgressBar.setProperty("value", 0)
        self.StabilizationProgressBar.setObjectName("StabilizationProgressBar")

        self.FunctionGroupH5Layout.addWidget(self.StabilizationProgressBar)
        self.FunctionGroupVLayout.addLayout(self.FunctionGroupH5Layout)

        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.FunctionTab)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(0, 480, 941, 541))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.BeforeStabilizedVLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)

        self.BeforeStabilizedVLayout.setContentsMargins(0, 0, 0, 0)
        self.BeforeStabilizedVLayout.setObjectName("BeforeStabilizedVLayout")

        self.BeforeStabilizedTab = QtWidgets.QTabWidget(self.FunctionTab)
        self.BeforeStabilizedTab.setGeometry(QtCore.QRect(0, 490, 940, 540))
        self.BeforeStabilizedTab.setObjectName("BeforeStabilizedTab")

        self.OriginalFrameWidget = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(20)
        self.OriginalFrameWidget.setFont(font)
        self.OriginalFrameWidget.setObjectName("OriginalFrameWidget")

        self.ShowOriginalFrame = CustomGraphicsView(self.OriginalFrameWidget)
        self.ShowOriginalFrame.setGeometry(QtCore.QRect(140, 0, 640, 450))
        self.ShowOriginalFrame.setObjectName("ShowOriginalFrame")

        self.layoutWidget = QtWidgets.QWidget(self.OriginalFrameWidget)
        self.layoutWidget.setGeometry(QtCore.QRect(140, 460, 641, 41))
        self.layoutWidget.setObjectName("layoutWidget")

        self.OriginalFrameHLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.OriginalFrameHLayout.setContentsMargins(0, 0, 0, 0)
        self.OriginalFrameHLayout.setObjectName("OriginalFrameHLayout")

        self.ProcessFrameProgressBar = QtWidgets.QSlider(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(36)
        self.ProcessFrameProgressBar.setFont(font)
        self.ProcessFrameProgressBar.setOrientation(QtCore.Qt.Horizontal)
        self.ProcessFrameProgressBar.setObjectName("ProcessFrameProgressBar")

        self.OriginalFrameHLayout.addWidget(self.ProcessFrameProgressBar)

        self.ControlFrameNumber = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(24)
        self.ControlFrameNumber.setFont(font)
        self.ControlFrameNumber.setObjectName("ControlFrameNumber")
        self.OriginalFrameHLayout.addWidget(self.ControlFrameNumber)
        self.BeforeStabilizedTab.addTab(self.OriginalFrameWidget, "")

        self.tabWidget = QtWidgets.QTabWidget(self.FunctionTab)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 940, 490))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.StabilizedFrame = CustomGraphicsView(self.tab_3)
        self.StabilizedFrame.setGeometry(QtCore.QRect(140, 0, 640, 450))
        self.StabilizedFrame.setObjectName("StabilizedFrame")
        self.tabWidget.addTab(self.tab_3, "")
        self.FunctionAndVideoTab.addTab(self.FunctionTab, "")
        self.VideoTab = QtWidgets.QWidget()
        self.VideoTab.setObjectName("VideoTab")

        # Create a QVideoWidget for video playback
        self.videoWidget = QtMultimediaWidgets.QVideoWidget(self.VideoTab)
        self.videoWidget.setGeometry(QtCore.QRect(110, 220, 1280, 480))
        self.videoWidget.setObjectName("videoWidget")

        # Create media player
        self.mediaPlayer = QtMultimedia.QMediaPlayer(None, QtMultimedia.QMediaPlayer.VideoSurface)
        self.mediaPlayer.setVideoOutput(self.videoWidget)

        self.Play = QtWidgets.QPushButton(self.VideoTab)
        self.Play.setGeometry(QtCore.QRect(750, 700, 151, 51))

        font = QtGui.QFont()
        font.setPointSize(14)
        self.Play.setFont(font)
        self.Play.setObjectName("Play")
        self.FunctionAndVideoTab.addTab(self.VideoTab, "")

        self.TotalHLayout.addWidget(self.FunctionAndVideoTab)
        self.TotalVLayout.addLayout(self.TotalHLayout)

        self.retranslateUi(Stabilization)
        self.LoadVideo.clicked.connect(self.loadVideo)
        self.OriginalFrameProgressBar.valueChanged['int'].connect(self.updateFrame)
        self.Process.clicked.connect(self.stabilization)
        self.ProcessFrameProgressBar.valueChanged['int'].connect(self.updateStabilizedFrame)
        self.FunctionAndVideoTab.setCurrentIndex(0)
        self.BeforeStabilizedTab.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        self.pushButton.clicked.connect(self.startMarking)
        self.ResetMarkerButton.clicked.connect(self.resetMarker)
        self.Play.clicked.connect(self.playVideo)
        self.SmoothButton.clicked.connect(self.smoothStatus)
        self.WrappingButton.clicked.connect(self.wrappingStatus)
        self.SelectPreviousFrame.clicked.connect(self.SelectNumber)
        self.FunctionAndVideoTab.currentChanged.connect(self.FunctionAndVideoTabOnTabChanged)

        QtCore.QMetaObject.connectSlotsByName(Stabilization)

        self.frames = []
        self.stabilizedFrames = []
        self.videoPath = ""
        self.totalFrames = 0
        self.wrapping = 0
        self.smoothing = 0
    def retranslateUi(self, Stabilization):
        _translate = QtCore.QCoreApplication.translate
        Stabilization.setWindowTitle(_translate("Stabilization", "Stabilization"))
        self.FunctionGroupBox.setTitle(_translate("Stabilization", "Function"))
        self.LoadVideo.setText(_translate("Stabilization", "Load Video"))
        self.VideoName.setText(_translate("Stabilization", "FileName: "))
        self.OriginalFrameNumber.setText(_translate("Stabilization", "0/0"))
        self.SelectPreviousFrame.setText(_translate("Stabilization", "Move To Previous Frame"))
        self.WrappingButton.setText(_translate("Stabilization", "Wrap To Previous Frame"))
        self.SmoothButton.setText(_translate("Stabilization", "Smooth"))
        self.pushButton.setText(_translate("Stabilization", "Set Red Marker"))
        self.ResetMarkerButton.setText(_translate("Stabilization", "Reset Marker"))
        self.Process.setText(_translate("Stabilization", "Process"))
        self.ControlFrameNumber.setText(_translate("Stabilization", "0/0"))
        self.BeforeStabilizedTab.setTabText(self.BeforeStabilizedTab.indexOf(self.OriginalFrameWidget), _translate("Stabilization", "Before"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Stabilization", "After"))
        self.FunctionAndVideoTab.setTabText(self.FunctionAndVideoTab.indexOf(self.FunctionTab), _translate("Stabilization", "Stabilization"))
        self.Play.setText(_translate("Stabilization", "Play"))
        self.FunctionAndVideoTab.setTabText(self.FunctionAndVideoTab.indexOf(self.VideoTab), _translate("Stabilization", "Combined Video"))
    def FunctionAndVideoTabOnTabChanged(self, index):
        if index == self.FunctionAndVideoTab.indexOf(self.VideoTab):
            print("change!!!")
            self.setVideo(outputPath=(self.videoPath[:-4] + '_stabilized.mp4'))
            print("set done!!")
    def SelectNumber(self):
        print("selectNumber is ", self.SelectPreviousFrameNumber.value())
        outputPath = self.videoPath[:-4] + '_stabilized.mp4'
        referenceFrameNo = self.OriginalFrameProgressBar.value()
        if (self.OriginalFrameProgressBar.value() != 0) and (self.OriginalFrameProgressBar.value() - self.SelectPreviousFrameNumber.value() > 0 ):
            referenceFrameNo = self.OriginalFrameProgressBar.value()
        self.mediaPlayer.setMedia(QtMultimedia.QMediaContent(None))
        self.thread = QtCore.QThread()
        self.worker = StabilizationWorker(self.videoPath, outputPath, referenceFrameNo, self.wrapping, self.smoothing)
        self.worker.moveToThread(self.thread)
        self.worker.progress.connect(self.StabilizationProgressBar.setValue)
        self.worker.finished.connect(lambda: self.setVideo(outputPath))
        self.worker.finished.connect(self.handleStabilizedFrames)  # Connect to the new slot
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.thread.start()
    def smoothStatus(self):
        _translate = QtCore.QCoreApplication.translate
        if self.smoothing == 1:
            self.smoothing = 0
            self.SmoothButton.setText(_translate("Stabilization", "Smooth"))
        else:
            self.smoothing = 1
            self.SmoothButton.setText(_translate("Stabilization", "UnSmooth"))
        print("smoothStatus", self.smoothing)
    def wrappingStatus(self):
        _translate = QtCore.QCoreApplication.translate
        if self.wrapping == 1:
            self.wrapping = 0
            self.WrappingButton.setText(_translate("Stabilization", "Wrap To Previous Frame"))
        else:
            self.wrapping = 1
            self.WrappingButton.setText(_translate("Stabilization", "Wrap To Selected Frame"))
        print("wrappingStatus", self.wrapping)

    def resetMarker(self):
        print("reset")
        self.StabilizedFrame.clearPoints()
        self.ShowOriginalFrame.clearPoints()
        self.updateStabilizedFrame(self.ProcessFrameProgressBar.value())
    def stabilization(self):
        if self.videoPath:
            outputPath = self.videoPath[:-4] + '_stabilized.mp4'
            self.mediaPlayer.setMedia(QtMultimedia.QMediaContent(None))
            referenceFrameNo = self.OriginalFrameProgressBar.value()
            self.thread = QtCore.QThread()
            self.worker = StabilizationWorker(self.videoPath, outputPath, referenceFrameNo, self.wrapping, self.smoothing)
            self.worker.moveToThread(self.thread)
            self.worker.progress.connect(self.StabilizationProgressBar.setValue)
            self.worker.finished.connect(lambda: self.setVideo(outputPath))
            self.worker.finished.connect(self.handleStabilizedFrames)  # Connect to the new slot
            self.thread.started.connect(self.worker.run)
            self.worker.finished.connect(self.thread.quit)
            self.worker.finished.connect(self.worker.deleteLater)
            self.thread.finished.connect(self.thread.deleteLater)
            self.thread.start()
        else:
            QMessageBox.warning(None, "Warning", "Please choose a video first.")
    def playVideo(self):
        if self.mediaPlayer.state() == QtMultimedia.QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()
            self.Play.setText("Pause")
        else:
            self.mediaPlayer.play()
            self.Play.setText("Play")
        self.Play.setText("Play")
    def setVideo(self, outputPath):
        # Update the media player with the stabilized video
        self.mediaPlayer.setMedia(QtMultimedia.QMediaContent(QtCore.QUrl.fromLocalFile(outputPath)))
    def markPoint(self, point):
        # Mark point in both frames
        self.ShowOriginalFrame.addPoint(point)
        self.StabilizedFrame.addPoint(point)
    def startMarking(self):
        self.ShowOriginalFrame.pointClicked.connect(self.markPoint)
    def updateProgressAndFrames(self, progress):
        self.StabilizationProgressBar.setValue(progress)
        self.updateStabilizedFrame(progress)
    def handleStabilizedFrames(self, frameStabilized):
        # Handle the stabilized frames
        self.stabilizedFrames = frameStabilized
        # Update the GUI accordingly, for example, show the first stabilized frame
        self.updateStabilizedFrame(0)
    def loadVideo(self):
        options = QFileDialog.Options()
        fileName = ""
        try:
            fileName, _ = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()", "",
                                                  "All Files (*);;MP4 Files (*.mp4)", options=options)
        except Exception as e:
            print(e)

        if fileName is not None:
            print("fileName= ", fileName)
            self.videoPath = fileName
            self.frames = self.extractFrames(fileName)
            self.VideoName.setText("FileName: "+ os.path.basename(fileName))
            self.totalFrames = len(self.frames)
            self.OriginalFrameProgressBar.setMaximum(self.totalFrames - 1)
            self.OriginalFrameNumber.setText(f"0/{self.totalFrames}")
            self.updateFrame(0)
        else:
            print("No File Selected")
    def extractFrames(self, videoPath):
        cap = cv2.VideoCapture(videoPath)
        frames = []
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            frames.append(frame)
        cap.release()
        return frames
    def updateStabilizedFrame(self, frame_idx):
        self.ShowOriginalFrame.scene().clear()
        frame = self.stabilizedFrames[frame_idx]
        frame = cv2.resize(frame, (640, 480))
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        height, width, channel = frame.shape
        bytes_per_line = 3 * width
        q_img = QtGui.QImage(frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(q_img)

        self.StabilizedFrame.image_item = self.StabilizedFrame.scene().addPixmap(pixmap)
        if self.StabilizedFrame.points is not None:
            self.StabilizedFrame.redrawPoints()
        self.StabilizedFrame.setScene(self.StabilizedFrame.scene())
        self.ControlFrameNumber.setText(f"{frame_idx + 1}/{self.totalFrames - self.OriginalFrameProgressBar.value()}")
        self.ProcessFrameProgressBar.setMaximum(self.totalFrames - self.OriginalFrameProgressBar.value()-1)

        frame = self.frames[frame_idx + self.OriginalFrameProgressBar.value()]
        frame = cv2.resize(frame, (640, 480))
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        height, width, channel = frame.shape
        bytes_per_line = 3 * width
        q_img = QtGui.QImage(frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(q_img)
        self.ShowOriginalFrame.image_item = self.ShowOriginalFrame.scene().addPixmap(pixmap)
        if self.ShowOriginalFrame.points is not None:
            self.ShowOriginalFrame.redrawPoints()
        self.ShowOriginalFrame.setScene(self.ShowOriginalFrame.scene())
    def updateFrame(self, frame_idx):
        frame = self.frames[frame_idx]
        frame = cv2.resize(frame, (640, 480))
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        height, width, channel = frame.shape
        bytes_per_line = 3 * width
        q_img = QtGui.QImage(frame.data, width, height, bytes_per_line, QtGui.QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(q_img)
        scene = QGraphicsScene()
        scene.addPixmap(pixmap)
        self.ShowOriginalFrame.setScene(scene)
        self.OriginalFrameNumber.setText(f"{frame_idx + 1}/{self.totalFrames}")

class StabilizationWorker(QtCore.QObject):
    progress = QtCore.pyqtSignal(int)
    finished = QtCore.pyqtSignal(list)

    def __init__(self, inputPath, outputPath, referenceFrameNo, wrapping, smoothing):
        super().__init__()
        self.inputPath = inputPath
        self.outputPath = outputPath
        self.referenceFrameNo = referenceFrameNo
        self.wrapping = wrapping
        self.smoothing = smoothing
    def run(self):
        print(self.wrapping)
        frameStabilized = self.usingSIFTWithRansac(self.progress, self.wrapping, self.smoothing)
        self.finished.emit(frameStabilized)
    def movingAverage(self, curve, radius):
        window_size = 2 * radius + 1
        # Define the filter
        f = np.ones(window_size) / window_size
        # Add padding to the boundaries
        curve_pad = np.lib.pad(curve, (radius, radius), 'edge')
        # Apply convolution
        curve_smoothed = np.convolve(curve_pad, f, mode='same')
        # Remove padding
        curve_smoothed = curve_smoothed[radius:-radius]
        # return smoothed curve
        return curve_smoothed
    def smooth(self, trajectoryy):
        smoothed_trajectory = np.copy(trajectoryy)
        # Filter the x, y and angle curves
        for ii in range(3):
            smoothed_trajectory[:, ii] = self.movingAverage(trajectoryy[:, ii], radius=10)  # 100CAN CHANGE
        return smoothed_trajectory
    def fixBorder(self, frame):
        s = frame.shape
        # Scale the image 4% without moving the center
        T = cv2.getRotationMatrix2D((s[1] / 2, s[0] / 2), 0, 1.04)
        frame = cv2.warpAffine(frame, T, (s[1], s[0]))
        return frame
    def usingSIFTWithRansac(self, progress, wrapping, smoothing):
        print("wrapping = ", wrapping)
        print("smooth = ", smoothing)
        cap = cv2.VideoCapture(self.inputPath)
        # 調整這些參數以減少找到的特徵點數量
        contrastThreshold = 0.04  # 默認值是0.04，可以增加以減少特徵點
        edgeThreshold = 10  # 默認值是10，可以增加以減少特徵點
        nFeatures = 150  # 設置希望檢測到的特徵點的最大數量
        sift = cv2.SIFT_create(nfeatures=nFeatures, contrastThreshold=contrastThreshold, edgeThreshold=edgeThreshold)
        flann_params = dict(algorithm=0, trees=5)
        flann = cv2.FlannBasedMatcher(flann_params, {})
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        cap.set(cv2.CAP_PROP_POS_FRAMES, self.referenceFrameNo)
        ret, prev_frame = cap.read()
        prev_frame_resized = cv2.resize(prev_frame, (640, 480))
        prev_gray = cv2.cvtColor(prev_frame_resized, cv2.COLOR_BGR2GRAY)
        prev_kp, prev_des = sift.detectAndCompute(prev_gray, None)
        fourcc = cv2.VideoWriter_fourcc('m', 'p', '4', 'v')
        out = cv2.VideoWriter(self.outputPath, fourcc, cap.get(cv2.CAP_PROP_FPS), (1280, 480))
        frame_count = 0
        n_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        transforms = np.zeros((n_frames - 1 - self.referenceFrameNo , 3), np.float32)
        print(time.ctime(time.time()))
        for i in range(n_frames - self.referenceFrameNo - 1):
            ret, frame = cap.read()
            frame_resized = cv2.resize(frame, (640, 480))
            gray = cv2.cvtColor(frame_resized, cv2.COLOR_RGB2GRAY)
            kp, des = sift.detectAndCompute(gray, None)
            matches = flann.knnMatch(prev_des, des, k=2)
            good_matches = [m for m, n in matches if m.distance < 0.75 * n.distance]
            src_pts = np.float32([prev_kp[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)
            dst_pts = np.float32([kp[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)
            M, mask = cv2.estimateAffinePartial2D(src_pts, dst_pts, method=cv2.RANSAC)
            dx = M[0, 2]
            dy = M[1, 2]
            # Extract rotation angle
            da = np.arctan2(M[1, 0], M[0, 0])
            transforms[i] = [dx, dy, da]
            if wrapping == 1:
                prev_kp, prev_des = kp, des
            frame_count += 1
            progress.emit(frame_count * 100 // total_frames // 2)
        print(time.ctime(time.time()))
        # Compute trajectory using cumulative sum of transformations
        trajectory = np.cumsum(transforms, axis=0)
        # Calculate difference in smoothed_trajectory and trajectory
        smoothed_trajectory = self.smooth(trajectory)
        difference = smoothed_trajectory - trajectory
        transforms_smooth = transforms
        # Calculate newer transformation array
        if smoothing == 1:
            transforms_smooth = transforms + difference
        print(time.ctime(time.time()))

        # Reset stream to first frame
        cap.set(cv2.CAP_PROP_POS_FRAMES, self.referenceFrameNo)
        frameStabilized = []
        success, frame = cap.read()
        frame = cv2.resize(frame, (640, 480))
        frame = self.fixBorder(frame)
        frameStabilized.append(frame)
        out.write(frame)
        # Write n_frames-1 transformed frames
        for i in range(n_frames - self.referenceFrameNo - 1):
            success, frame = cap.read()
            # Extract transformations from the new transformation array
            dx = transforms_smooth[i, 0]
            dy = transforms_smooth[i, 1]
            da = transforms_smooth[i, 2]
            # Reconstruct transformation matrix accordingly to new values
            m = np.zeros((2, 3), np.float32)
            m[0, 0] = np.cos(da)
            m[0, 1] = -np.sin(da)
            m[1, 0] = np.sin(da)
            m[1, 1] = np.cos(da)
            m[0, 2] = dx
            m[1, 2] = dy
            # Apply affine wrapping to the given frame
            frame = cv2.resize(frame, (640, 480))
            frame_stabilized = cv2.warpAffine(frame, m, (640, 480))
            frame_stabilized = self.fixBorder(frame_stabilized)
            frameStabilized.append(frame_stabilized)
            frame_out = cv2.hconcat([frame, frame_stabilized])
            out.write(frame_out)
            frame_count += 1
            progress.emit(frame_count * 100 // total_frames // 2)
        out.release()
        cap.release()
        print(time.ctime(time.time()))

        progress.emit(100)

        dx = trajectory[:, 0]
        dy = trajectory[:, 1]

        dx_smooth = smoothed_trajectory[:, 0]
        dy_smooth = smoothed_trajectory[:, 1]

        # 創建一個圖形對象
        plt.figure(figsize=(10, 5))

        # 畫出 dx 對 frame 的曲線
        plt.subplot(2, 1, 1)
        plt.plot(dx, label='Original dx')
        plt.plot(dx_smooth, label='Smoothed dx')
        plt.xlabel('Frame')
        plt.ylabel('dx')
        plt.title('dx vs. Frame')
        plt.legend()

        # 畫出 dy 對 frame 的曲線
        plt.subplot(2, 1, 2)
        plt.plot(dy, label='Original dy')
        plt.plot(dy_smooth, label='Smoothed dy')
        plt.xlabel('Frame')
        plt.ylabel('dy')
        plt.title('dy vs. Frame')
        plt.legend()

        # 顯示圖形
        plt.tight_layout()
        plt.show()
        return frameStabilized

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Stabilization = QtWidgets.QWidget()
    ui = UiStabilization()
    ui.setupUi(Stabilization)
    Stabilization.show()
    sys.exit(app.exec_())

